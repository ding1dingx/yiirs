use salvo::{prelude::*, server::ServerHandle};

use internal::core::config;
use tokio::signal;

use crate::router;

pub async fn run() {
    let addr = config::global().get_int("app.port").unwrap_or(8000);
    let acceptor = TcpListener::new(format!("0.0.0.0:{}", addr)).bind().await;
    let mut server = Server::new(acceptor);
    // Sets the MAX_CONCURRENT_STREAMS for HTTP2
    server.http2_mut().max_concurrent_streams(None);
    // Listen Shutdown Signal
    let handle = server.handle();
    tokio::spawn(listen_shutdown_signal(handle));
    // Start Server
    server.serve(router::init()).await;
}

async fn listen_shutdown_signal(handle: ServerHandle) {
    // Wait Shutdown Signal
    let ctrl_c = async {
        signal::ctrl_c()
            .await
            .expect("failed to install Ctrl+C handler");
    };

    #[cfg(unix)]
    let terminate = async {
        signal::unix::signal(signal::unix::SignalKind::terminate())
            .expect("failed to install signal handler")
            .recv()
            .await;
    };

    #[cfg(windows)]
    let terminate = async {
        signal::windows::ctrl_c()
            .expect("failed to install signal handler")
            .recv()
            .await;
    };

    tokio::select! {
        _ = ctrl_c => println!("ctrl_c signal received"),
        _ = terminate => println!("terminate signal received"),
    };

    // Graceful Shutdown Server
    handle.stop_graceful(None);
}
